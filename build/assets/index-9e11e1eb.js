import{c as b,_ as x}from"./BeefyV2AppMulticall-a6811ee2.js";import{ae as E,f9 as B,bb as I,aD as _,b0 as g}from"./index-fc282d72.js";const v=x;class L{constructor(a,i){this.web3=a,this.chain=i}async fetchAllAllowances(a,i,h,m,u){const d=new this.web3.eth.Contract(v,this.chain.appMulticallContractAddress),r={},A={},c=(s,o)=>{const e=_(a,this.chain.id,s),n=e.address.toLowerCase();if(!g(e))throw new Error(`Can't query allowance of non erc20 token, skipping ${e.id}`);r[n]===void 0&&(r[n]={tokenAddress:e.address,spenders:new Set}),r[n].spenders.add(o),A[n]===void 0&&(A[n]=e)};for(const s of i)c(s.earnedTokenAddress,s.earnContractAddress),c(s.depositTokenAddress,s.earnContractAddress);for(const s of h)c(s.depositTokenAddress,s.earnContractAddress);for(const s of m){const o=E(a,s.vaultId);c(o.earnedTokenAddress,s.earnContractAddress)}const C=B(),p=Object.entries(r),w=b(p,C),y=w.map(s=>d.methods.getAllowancesFlat(s.map(([o,e])=>o),s.map(([o,e])=>Array.from(e.spenders)),u).call()),k=await Promise.all([...y]),f=[];let t=0;for(const s of w){const o=k[t];let e=0;for(const n of s.map(l=>l[1]))for(const l of Array.from(n.spenders)){const T=o[e];T!=="0"&&f.push({tokenAddress:n.tokenAddress,spenderAddress:l,allowance:new I(T).shiftedBy(-A[n.tokenAddress.toLowerCase()].decimals)}),e++}t++}return f}async fetchTokensAllowance(a,i,h,m){const u=new this.web3.eth.Contract(v,this.chain.appMulticallContractAddress),d={},r={},A=(t,s)=>{const o=_(a,this.chain.id,t),e=o.address.toLowerCase();if(!g(o))throw new Error(`Can't query allowance of non erc20 token, skipping ${o.id}`);d[e]===void 0&&(d[e]={tokenAddress:o.address,spenders:new Set}),d[e].spenders.add(s),r[e]===void 0&&(r[e]=o)};for(const t of i)A(t.address,m);const c=B(),C=Object.entries(d),p=b(C,c),w=p.map(t=>u.methods.getAllowancesFlat(t.map(([s,o])=>s),t.map(([s,o])=>Array.from(o.spenders)),h).call()),y=await Promise.all([...w]),k=[];let f=0;for(const t of p){const s=y[f];let o=0;for(const e of t.map(n=>n[1]))for(const n of Array.from(e.spenders)){const l=s[o];l!=="0"&&k.push({tokenAddress:e.tokenAddress,spenderAddress:n,allowance:new I(l).shiftedBy(-r[e.tokenAddress.toLowerCase()].decimals)}),o++}f++}return k}}export{L as AllowanceAPI};
